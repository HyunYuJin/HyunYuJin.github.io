---
layout: post
title: Promise
date: 2020-05-18 20:36:00
description: 자바스크립트 공부
---

# Promise란?
자바스크립트 비동기 처리에 사용되는 객체

# Promise가 왜 필요한가?
주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다.
일반적으로 웹 어플리케이션을 구현할 때 서버에서 데이터를 요청하고 받아오는데 여기서 데이터를 받아오기도 전에 마치 데이터를 다 받아온 것 마냥 화면에 데이터를 표시하려하면 오류가 뜨거나 빈 화면이 뜬다.

이와 같은 문제점을 해결하기 위한 방법 중 하나가 Promise다.

# Promise 기초

```javascript
var _promise = function (param) {
		// Promise 선언부
		// 나중에 Promise 객체를 생성하기 위해 Promise 객체를 리턴하도록 함수를 감싸고 있다.
		// Promise 객체를 보면 익명함수로 resolve, reject를 파라미터로 받고 있다.
    return new Promise(function (resolve, reject) {
        // 비동기를 표현하기 위해서 setTimeout 함수를 사용했다.
        window.setTimeout(function () {
            // 만약 param이 true라면
            if (param) {
                // 해결되었다.
                resolve('해결')
            } else {
                // param이 false라면
                reject(Error('실패'))
            }
        }, 3000);
    });
};

// Promise 실행부
// _promise를 호출하면 Promise 객체가 return 된다.
_promise(true)
// 정상적으로 비동기 작업이 완료되었을 때 호출하는 then이라는 API가 존재
.then(function (text) {
    // 성공 시
    console.log(text);
}, function (error) {
    // 실패 시
    console.error(error);
});
```

Promise는 말 그대로 약속이다. ***"지금은 없으니까 이따가 줄게~"***라는 약속.
***"지금은 없는데 이상 없으면 이따가 주고 없으면 알려줄게~"***

**참고문헌 :** [https://programmingsummaries.tistory.com/325](https://programmingsummaries.tistory.com/325)

# Promise 작동

```javascript
function getData(callbackFunc) {
	// new Promise() 추가
	return new Promise(function(resolve, reject) {
		$.get('https://url/products/1', function(response) {
			// 데이터를 받으면 resolve() 호출
			resolve(response)
		});
	});
}

getData().then(function(tableData) {
	// resolve의 결과 값이 여기로 전달된다.
	console.log(tableData)
});
```

# Promise의 3가지 상태(states)
여기서 states란 Promise의 처리 과정을 의미한다.
new Promise()로 Promise를 생성하고 종료될 때까지 3가지 상태를 갖는다.

1. Pending(대기): 비동기 처리 로직이 아직 완료되지 않은 상태
2. Fulfilled(이행): 비동기 처리가 완료되어 Promise가 결과 값을 반환해준 상태
    1. 이때 아마 Leaflet Routing Machine을 실행시켜주면 되지 않을까?
3. Rejected(실패): 비동기 처리가 실패하거나 오류가 발생한 상태

### Pending(대기)
new Promise() 메서드를 호출하면 대기 상태가 된다.

```javascript
new Promise();
```
new Promise() 메서드를 호출할 때 콜백 함수를 선언할 수 있고, 콜백 함수 인자는 resolve, reject다.

```javascript
new Promise(function(resolve, reject) {

})
```

### Fulfilled(이행 / 완료)
여기서 resolve를 아래와 같이 실행하면 이행 상태가 된다.

```javascript
new Promise(function(resolve, reject) {
	resolve()
})
```

이행 상태가 되면 then()을 이용해서 **처리 결과 값**을 받을 수 있다.

```javascript
function getData() {
	return new Promise(resolve, reject) {
		var data = 100
		resolve(data)
	})
}

getData().then(function(resolvedData) {
	console.log(resolvedData)
})
```

### Reject(실패)
reject와 같이 호출하면 실패 상태가 된다.

```javascript
new Promise(resolve, reject) {
	reject()
})
```

실패 상태가 되면 실패한 이유(실패 처리의 결과)를 catch()로 받을 수 있다.

```javascript
function getData() {
	new Promise(resolve, reject) {
		reject(new Error("Request is failed"))
	})
}

getData().then().catch(function(error) {
	console.log(error)
})
```

# 예제

```javascript
function getData() {
	return new Promise(function (resolve, reject) {
		$.get('https://url/products/1', function(response) {
			if(response) {
				resolve(response)
			} else {
				reject(new Error('Request is failed!')
			}
		});
	});
}

getData().then(function(data) {
	console.log(data)
}).catch(function(error) {
	console.log(error)
})
```

## 여러개의 Promise 연결하기

```javascript
function getData() {
	return new Promise({

	});
}

// then()으로 여러 개의 Promise를 연결
getData()
	.then(function(data1) {

	})
	.then(function(data2) {

	})
	.then(function(data3) {

	})
```

```javascript
new Promise(function (resolve, reject) {
	setTimeout(function() {
		resolve(1)
	}, 2000);
})
.then(function(result) {
	console.log(result) // 1
	return result + 10
})
.then(function(result) {
	console.log(result) // 11
	return result + 20
})
.then(function(result) {
	console.log(result) // 31
})
```
